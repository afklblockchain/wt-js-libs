{
  "type": "File",
  "start": 0,
  "end": 16587,
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 394,
      "column": 23
    }
  },
  "program": {
    "type": "Program",
    "start": 0,
    "end": 16587,
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 394,
        "column": 23
      }
    },
    "sourceType": "module",
    "body": [],
    "directives": [],
    "leadingComments": null,
    "innerComments": [
      {
        "type": "CommentBlock",
        "value": "\nvar WTKey = require('./WTKey');\nvar WTWallet = require('./WTWallet');\nvar WTUtils = require('./WTUtils');\nvar WTKeyIndexContract = require('../build/contracts/WTKeyIndex.json');\nvar WTIndexContract = require('../build/contracts/WTIndex.json');\nvar HotelContract = require('../build/contracts/Hotel.json');\nvar UnitTypeContract = require('../build/contracts/UnitType.json');\nvar UnitContract = require('../build/contracts/Unit.json');\nvar PrivateCallContract = require('../build/contracts/PrivateCall.json');\nvar LifTokenContract = require('../build/contracts/LifToken.json');\n\nconst util = require('ethereumjs-util');\n\nvar Hotel = function(options){\n\n  // Winding Tree key for encryption\n  this.WTKey = new WTKey(options.keys || {});\n\n  // Ethereum Wallet\n  this.wallet = new WTWallet(options.wallet || {});\n\n  this.utils = WTUtils;\n\n  this.web3 = this.wallet.web3;\n\n  this.hotels = options.hotels || {};\n  this.indexAddress = options.indexAddress || '';\n  this.wtIndex = options.indexAddress ? new WTIndexContract().at(options.indexAddress) : null;\n  this.contracts = {\n    WTIndex: WTIndexContract,\n    WTKeyIndex: WTKeyIndexContract,\n    Hotel: HotelContract,\n    LifToken: LifTokenContract,\n    HotelUnit: UnitContract,\n    HotelUnitType: UnitTypeContract\n  };\n\n  this.setIndex = function(indexAddress){\n    this.indexAddress = indexAddress;\n    this.wtIndex = this.web3.eth.contract(this.contracts.WTIndex.abi).at(indexAddress);\n  }\n\n  // Update hotels information\n  this.updateHotels = function(){\n    this.hotelsAddrs = this.wtIndex.getHotelsByOwner(this.wallet.address);\n    this.hotels = {};\n    for (var i = 0; i < this.hotelsAddrs.length; i++)\n      this.updateHotel(this.hotelsAddrs[i]);\n    return this.hotels;\n  }\n\n  // Update hotel information\n  this.updateHotel = function(hotelAddress){\n    let wtHotel = this.web3.eth.contract(this.contracts.Hotel.abi).at(hotelAddress);\n    let unitTypeNames = wtHotel.getUnitTypeNames();\n    let unitTypes = [];\n    let totalUnits = wtHotel.getChildsLength();\n    let units = [];\n\n    // Hotel images\n    let hotelImages = [];\n    for (var z = 0; z < wtHotel.getImagesLength(); z++)\n      hotelImages.push(wtHotel.getImage(z));\n\n    // Unit Types\n    for (var i = 1; i < unitTypeNames.length; i++) {\n      if (wtHotel.getUnitType(unitTypeNames[i]) != '0x0000000000000000000000000000000000000000'){\n        let hotelUnitType = this.web3.eth.contract(this.contracts.HotelUnitType.abi).at(wtHotel.getUnitType(unitTypeNames[i]));\n        let unitTypeInfo = hotelUnitType.getInfo();\n        let hotelUnitAmenities = [];\n        hotelUnitType.getAmenities(z).map(function(a ,i){\n          if (parseInt(a) > 0) hotelUnitAmenities.push(parseInt(a));\n        });\n        let images = [];\n        for (var z = 0; z < hotelUnitType.getImagesLength(); z++)\n          images.push(hotelUnitType.getImage(z));\n        unitTypes.push({\n          type: this.web3.toAscii(unitTypeNames[i]).replace(/\\W+/g, \"\"),\n          index: z,\n          description: unitTypeInfo[0],\n          minGuests:  parseInt(unitTypeInfo[1]),\n          maxGuests: parseInt(unitTypeInfo[2]),\n          price: unitTypeInfo[3],\n          active: unitTypeInfo[3],\n          amenities: hotelUnitAmenities,\n          images: images\n        });\n      }\n    }\n\n    // Hotel Units\n    for (var i = 1; i < totalUnits; i++) {\n      let unitAddress = wtHotel.childs.call(i);\n      if (unitAddress != '0x0000000000000000000000000000000000000000'){\n        let hotelUnit = this.web3.eth.contract(this.contracts.HotelUnit.abi).at(unitAddress);\n        units.push({\n          address: unitAddress,\n          unitType: hotelUnit.unitType(),\n          active: hotelUnit.active()\n        });\n      }\n    }\n\n    this.hotels[hotelAddress] = {\n      name: wtHotel.name(),\n      description: wtHotel.description(),\n      lineOne: wtHotel.lineOne(),\n      lineTwo: wtHotel.lineTwo(),\n      zip: wtHotel.zip(),\n      country: wtHotel.country(),\n      timezone: parseInt(wtHotel.timezone()),\n      latitude: parseInt(wtHotel.latitude()),\n      longitude: parseInt(wtHotel.longitude()),\n      images: hotelImages,\n      unitTypes: unitTypes,\n      units: units\n    };\n    return this.hotels[hotelAddress];\n  }\n\n  // Create a hotel contract\n  this.createHotel = async function(password, name, description){\n    var self = this;\n    const data = self.wtIndex.registerHotel.getData(name, description, {from: self.wallet.address});\n    let tx = await self.wallet.sendTx(password, {\n      to: self.wtIndex.address,\n      data: data,\n      gasLimit: 4700000\n    });\n    await self.wallet.waitForTX(tx.transactionHash);\n    const wtHotelAddress = await self.wtIndex.getHotelsByOwner(self.wallet.address);\n    let wtHotel = self.web3.eth.contract(self.contracts.Hotel.abi).at(wtHotelAddress[ wtHotelAddress.length-1 ]);\n    return wtHotel;\n  }\n\n  this.changeHotelInfo = async function(password, hotelAddress, name, description){\n    var self = this;\n    const wtHotelAddresses = await self.wtIndex.getHotelsByOwner(self.wallet.address);\n    const hotelIndex = wtHotelAddresses.indexOf(hotelAddress);\n    let wtHotel = self.web3.eth.contract(self.contracts.Hotel.abi).at(hotelAddress);\n    let data = wtHotel.editInfo.getData(name, description);\n    data = self.wtIndex.callHotel.getData(hotelIndex, data, {from: self.wallet.address});\n    let tx = await self.wallet.sendTx(password, {\n      to: self.wtIndex.address,\n      data: data,\n      gasLimit: 4700000\n    });\n    await self.wallet.waitForTX(tx.transactionHash);\n  }\n\n  this.changeHotelAddress = async function(password, hotelAddress, lineOne, lineTwo, zipCode, country){\n    var self = this;\n    const wtHotelAddresses = await self.wtIndex.getHotelsByOwner(self.wallet.address);\n    const hotelIndex = wtHotelAddresses.indexOf(hotelAddress);\n    let wtHotel = self.web3.eth.contract(self.contracts.Hotel.abi).at(hotelAddress);\n    let data = wtHotel.editAddress.getData(lineOne, lineTwo, zipCode, country);\n    data = self.wtIndex.callHotel.getData(hotelIndex, data, {from: self.wallet.address});\n    let tx = await self.wallet.sendTx(password, {\n      to: self.wtIndex.address,\n      data: data,\n      gasLimit: 4700000\n    });\n    return await self.wallet.waitForTX(tx.transactionHash);\n  }\n\n  this.changeHotelLocation = async function(password, hotelAddress, timezone, latitude, longitude){\n    var self = this;\n    const wtHotelAddresses = await self.wtIndex.getHotelsByOwner(self.wallet.address);\n    const hotelIndex = wtHotelAddresses.indexOf(hotelAddress);\n    let wtHotel = self.web3.eth.contract(self.contracts.Hotel.abi).at(hotelAddress);\n    let data = wtHotel.editLocation.getData(timezone, latitude, longitude);\n    data = self.wtIndex.callHotel.getData(hotelIndex, data);\n    let tx = await self.wallet.sendTx(password, {\n      to: self.wtIndex.address,\n      data: data,\n      gasLimit: 4700000\n    });\n    return await self.wallet.waitForTX(tx.transactionHash);\n  }\n\n  this.addUnitType = async function(password, hotelAddress, unitType){\n    var self = this;\n    const wtHotelAddresses = await self.wtIndex.getHotelsByOwner(self.wallet.address);\n    const hotelIndex = wtHotelAddresses.indexOf(hotelAddress);\n    let wtHotel = self.web3.eth.contract(self.contracts.Hotel.abi).at(hotelAddress);\n\n    let data = self.web3.eth.contract(self.contracts.HotelUnitType.abi).new.getData(hotelAddress, self.web3.toHex(unitType), {data: self.contracts.HotelUnitType.unlinked_binary});\n    let tx = await self.wallet.sendTx(password, {\n      data: data,\n      gasLimit: 4700000\n    });\n    const createTx = await self.wallet.waitForTX(tx.transactionHash);\n    let wtHotelUnitType = self.web3.eth.contract(self.contracts.HotelUnitType.abi).at(createTx.contractAddress);\n\n    data = wtHotel.addUnitType.getData(wtHotelUnitType.address, self.web3.toHex(unitType));\n    data = self.wtIndex.callHotel.getData(hotelIndex, data);\n    tx = await self.wallet.sendTx(password, {\n      to: self.wtIndex.address,\n      data: data,\n      gasLimit: 4700000\n    });\n\n    return await self.wallet.waitForTX(tx.transactionHash);\n  }\n\n  this.removeUnitType = async function(password, hotelAddress, unitType){\n    var self = this;\n    const wtHotelAddresses = await self.wtIndex.getHotelsByOwner(self.wallet.address);\n    const hotelIndex = wtHotelAddresses.indexOf(hotelAddress);\n    let wtHotel = self.web3.eth.contract(self.contracts.Hotel.abi).at(hotelAddress);\n    const unitTypeHex = util.bufferToHex(util.setLengthRight(self.web3.toHex(unitType), 32));\n    const unitTypeIndex = wtHotel.getUnitTypeNames().indexOf(unitTypeHex);\n    let data = wtHotel.removeUnitType.getData(self.web3.toHex(unitType), unitTypeIndex);\n    data = self.wtIndex.callHotel.getData(hotelIndex, data);\n    const tx = await self.wallet.sendTx(password, {\n      to: self.wtIndex.address,\n      data: data,\n      gasLimit: 4700000\n    });\n    return await self.wallet.waitForTX(tx.transactionHash);\n  }\n\n    this.editUnitType = async function(password, hotelAddress, unitType, description, minGuests, maxGuests, price){\n    var self = this;\n    const wtHotelAddresses = await self.wtIndex.getHotelsByOwner(self.wallet.address);\n    const hotelIndex = wtHotelAddresses.indexOf(hotelAddress);\n    let wtHotel = self.web3.eth.contract(self.contracts.Hotel.abi).at(hotelAddress);\n    let wtHotelUnitType = self.web3.eth.contract(self.contracts.HotelUnitType.abi).at(await wtHotel.getUnitType(self.web3.toHex(unitType)));\n    let data = wtHotelUnitType.edit.getData(description, minGuests, maxGuests, price);\n    data = wtHotel.callUnitType.getData(self.web3.toHex(unitType), data);\n    data = self.wtIndex.callHotel.getData(hotelIndex, data);\n    let tx = await self.wallet.sendTx(password, {\n      to: self.wtIndex.address,\n      data: data,\n      gasLimit: 4700000\n    });\n    return await self.wallet.waitForTX(tx.transactionHash);\n  }\n\n\n  this.addUnit = async function(password, hotelAddress, unitType){\n    var self = this;\n    const wtHotelAddresses = await self.wtIndex.getHotelsByOwner(self.wallet.address);\n    const hotelIndex = wtHotelAddresses.indexOf(hotelAddress);\n\n    let data = self.web3.eth.contract(self.contracts.HotelUnit.abi).new.getData(hotelAddress, self.web3.toHex(unitType), {data: self.contracts.HotelUnit.unlinked_binary});\n    let tx = await self.wallet.sendTx(password, {\n      data: data,\n      gasLimit: 4700000\n    });\n    const createTx = await self.wallet.waitForTX(tx.transactionHash);\n\n    let wtHotel = self.web3.eth.contract(self.contracts.Hotel.abi).at(hotelAddress);\n    data = wtHotel.addUnit.getData(self.web3.toHex(unitType), createTx.contractAddress);\n    data = self.wtIndex.callHotel.getData(hotelIndex, data);\n    tx = await self.wallet.sendTx(password, {\n      to: self.wtIndex.address,\n      data: data,\n      gasLimit: 4700000\n    });\n    return await self.wallet.waitForTX(tx.transactionHash);\n  }\n\n  this.removeUnit = async function(password, hotelAddress, unitAddress){\n    var self = this;\n    const wtHotelAddresses = await self.wtIndex.getHotelsByOwner(self.wallet.address);\n    const hotelIndex = wtHotelAddresses.indexOf(hotelAddress);\n    let wtHotel = self.web3.eth.contract(self.contracts.Hotel.abi).at(hotelAddress);\n    let data = wtHotel.removeUnit.getData(unitAddress);\n    data = self.wtIndex.callHotel.getData(hotelIndex, data);\n    let tx = await self.wallet.sendTx(password, {\n      to: self.wtIndex.address,\n      data: data,\n      gasLimit: 4700000\n    });\n    return await self.wallet.waitForTX(tx.transactionHash);\n  }\n\n  this.setUnitActive = async function(password, hotelAddress, unitAddress, active){\n    var self = this;\n    const wtHotelAddresses = await self.wtIndex.getHotelsByOwner(self.wallet.address);\n    const hotelIndex = wtHotelAddresses.indexOf(hotelAddress);\n    let wtHotel = self.web3.eth.contract(self.contracts.Hotel.abi).at(hotelAddress);\n    let wtHotelUnit = self.web3.eth.contract(self.contracts.HotelUnit.abi).at(unitAddress);\n    let data = wtHotelUnit.setActive.getData(active);\n    data = wtHotel.callUnit.getData(unitAddress, data);\n    data = self.wtIndex.callHotel.getData(hotelIndex, data);\n    let tx = await self.wallet.sendTx(password, {\n      to: self.wtIndex.address,\n      data: data,\n      gasLimit: 4700000\n    });\n    return await self.wallet.waitForTX(tx.transactionHash);\n  }\n\n  this.setUnitPrice = async function(password, hotelAddress, unitAddress, price, fromDay, amountDays){\n    var self = this;\n    const wtHotelAddresses = await self.wtIndex.getHotelsByOwner(self.wallet.address);\n    const hotelIndex = wtHotelAddresses.indexOf(hotelAddress);\n    let wtHotel = self.web3.eth.contract(self.contracts.Hotel.abi).at(hotelAddress);\n    let wtHotelUnit = self.web3.eth.contract(self.contracts.HotelUnit.abi).at(unitAddress);\n    let data = wtHotelUnit.setPrice.getData(price, fromDay, amountDays);\n    data = wtHotel.callUnit.getData(unitAddress, data);\n    data = self.wtIndex.callHotel.getData(hotelIndex, data);\n    let tx = await self.wallet.sendTx(password, {\n      to: self.wtIndex.address,\n      data: data,\n      gasLimit: 4700000\n    });\n    return await self.wallet.waitForTX(tx.transactionHash);\n  }\n\n  this.addAmenity = async function(password, hotelAddress, unitType, amenity){\n    var self = this;\n    const wtHotelAddresses = await self.wtIndex.getHotelsByOwner(self.wallet.address);\n    const hotelIndex = wtHotelAddresses.indexOf(hotelAddress);\n    let wtHotel = self.web3.eth.contract(self.contracts.Hotel.abi).at(hotelAddress);\n    let wtHotelUnitType = self.web3.eth.contract(self.contracts.HotelUnitType.abi).at(await wtHotel.getUnitType(self.web3.toHex(unitType)));\n    let data = wtHotelUnitType.addAmenity.getData(amenity);\n    data = wtHotel.callUnitType.getData(self.web3.toHex(unitType), data);\n    data = self.wtIndex.callHotel.getData(hotelIndex, data);\n    let tx = await self.wallet.sendTx(password, {\n      to: self.wtIndex.address,\n      data: data,\n      gasLimit: 4700000\n    });\n    return await self.wallet.waitForTX(tx.transactionHash);\n  }\n\n  this.removeAmenity = async function(password, hotelAddress, unitType, amenity){\n    var self = this;\n    const wtHotelAddresses = await self.wtIndex.getHotelsByOwner(self.wallet.address);\n    const hotelIndex = wtHotelAddresses.indexOf(hotelAddress);\n    let wtHotel = self.web3.eth.contract(self.contracts.Hotel.abi).at(hotelAddress);\n    let wtHotelUnitType = self.web3.eth.contract(self.contracts.HotelUnitType.abi).at(await wtHotel.getUnitType(self.web3.toHex(unitType)));\n    let data = wtHotelUnitType.removeAmenity.getData(amenity);\n    data = wtHotel.callUnitType.getData(self.web3.toHex(unitType), data);\n    data = self.wtIndex.callHotel.getData(hotelIndex, data);\n    let tx = await self.wallet.sendTx(password, {\n      to: self.wtIndex.address,\n      data: data,\n      gasLimit: 4700000\n    });\n    return await self.wallet.waitForTX(tx.transactionHash);\n  }\n\n  this.getBookings = function(){\n    var self = this;\n    var txs = [];\n    let wtHotelAddresses = this.wtIndex.getHotelsByOwner(this.wallet.address);\n    for (var i = 0; i < wtHotelAddresses.length; i++){\n      let wtHotel = this.web3.eth.contract(this.contracts.Hotel.abi).at(wtHotelAddresses[i]);\n      let unitTypeNames = wtHotel.getUnitTypeNames();\n      for (var u = 1; u < unitTypeNames.length; u++)\n        txs = _.merge(txs, self.wallet.getTxs({\n          address: wtHotel.getUnitType(unitTypeNames[u]),\n          from: false\n        }));\n    }\n    for (i = 0; i < txs.length; i++)\n      txs[i].decoded = self.abiDecoder.decodeMethod(txs[i].input);\n    txs = _.filter(txs, function(t){ return t.decoded});\n    for (i = 0; i < txs.length; i++){\n      let unitType = self.web3.eth.contract(self.contracts.HotelUnitType.abi).at(txs[i].to);\n      txs[i].publicCall = self.abiDecoder.decodeMethod(txs[i].decoded.params[0].value);\n      txs[i].privateData = self.web3.toAscii(txs[i].decoded.params[1].value);\n      txs[i].unitType = self.web3.toAscii( unitType.unitType() ).replace(/\\W+/g, \"\");\n      txs[i].hotelAddress = unitType.owner();\n      txs[i].hotelName = self.web3.eth.contract(self.contracts.Hotel.abi).at(txs[i].hotelAddress).name();\n      txs[i].accepted = false;\n    }\n    return txs;\n  }\n\n  this.getHotels = function() {\n    return this.hotels;\n  }\n\n  this.getHotelsAddrs = function() {\n    return this.hotelsAddrs;\n  }\n\n  this.getHotel = function(hotelAddress) {\n    return this.hotels[hotelAddress];\n  }\n\n  this.getReservation = function(unitAddress, day) {\n    return this.web3.eth.contract(this.contracts.HotelUnit.abi).at(unitAddress).getReservation(day);\n  }\n\n};\n\nexport default Hotel;",
        "start": 0,
        "end": 16587,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 394,
            "column": 23
          }
        }
      }
    ]
  },
  "comments": [
    {
      "type": "CommentBlock",
      "value": "\nvar WTKey = require('./WTKey');\nvar WTWallet = require('./WTWallet');\nvar WTUtils = require('./WTUtils');\nvar WTKeyIndexContract = require('../build/contracts/WTKeyIndex.json');\nvar WTIndexContract = require('../build/contracts/WTIndex.json');\nvar HotelContract = require('../build/contracts/Hotel.json');\nvar UnitTypeContract = require('../build/contracts/UnitType.json');\nvar UnitContract = require('../build/contracts/Unit.json');\nvar PrivateCallContract = require('../build/contracts/PrivateCall.json');\nvar LifTokenContract = require('../build/contracts/LifToken.json');\n\nconst util = require('ethereumjs-util');\n\nvar Hotel = function(options){\n\n  // Winding Tree key for encryption\n  this.WTKey = new WTKey(options.keys || {});\n\n  // Ethereum Wallet\n  this.wallet = new WTWallet(options.wallet || {});\n\n  this.utils = WTUtils;\n\n  this.web3 = this.wallet.web3;\n\n  this.hotels = options.hotels || {};\n  this.indexAddress = options.indexAddress || '';\n  this.wtIndex = options.indexAddress ? new WTIndexContract().at(options.indexAddress) : null;\n  this.contracts = {\n    WTIndex: WTIndexContract,\n    WTKeyIndex: WTKeyIndexContract,\n    Hotel: HotelContract,\n    LifToken: LifTokenContract,\n    HotelUnit: UnitContract,\n    HotelUnitType: UnitTypeContract\n  };\n\n  this.setIndex = function(indexAddress){\n    this.indexAddress = indexAddress;\n    this.wtIndex = this.web3.eth.contract(this.contracts.WTIndex.abi).at(indexAddress);\n  }\n\n  // Update hotels information\n  this.updateHotels = function(){\n    this.hotelsAddrs = this.wtIndex.getHotelsByOwner(this.wallet.address);\n    this.hotels = {};\n    for (var i = 0; i < this.hotelsAddrs.length; i++)\n      this.updateHotel(this.hotelsAddrs[i]);\n    return this.hotels;\n  }\n\n  // Update hotel information\n  this.updateHotel = function(hotelAddress){\n    let wtHotel = this.web3.eth.contract(this.contracts.Hotel.abi).at(hotelAddress);\n    let unitTypeNames = wtHotel.getUnitTypeNames();\n    let unitTypes = [];\n    let totalUnits = wtHotel.getChildsLength();\n    let units = [];\n\n    // Hotel images\n    let hotelImages = [];\n    for (var z = 0; z < wtHotel.getImagesLength(); z++)\n      hotelImages.push(wtHotel.getImage(z));\n\n    // Unit Types\n    for (var i = 1; i < unitTypeNames.length; i++) {\n      if (wtHotel.getUnitType(unitTypeNames[i]) != '0x0000000000000000000000000000000000000000'){\n        let hotelUnitType = this.web3.eth.contract(this.contracts.HotelUnitType.abi).at(wtHotel.getUnitType(unitTypeNames[i]));\n        let unitTypeInfo = hotelUnitType.getInfo();\n        let hotelUnitAmenities = [];\n        hotelUnitType.getAmenities(z).map(function(a ,i){\n          if (parseInt(a) > 0) hotelUnitAmenities.push(parseInt(a));\n        });\n        let images = [];\n        for (var z = 0; z < hotelUnitType.getImagesLength(); z++)\n          images.push(hotelUnitType.getImage(z));\n        unitTypes.push({\n          type: this.web3.toAscii(unitTypeNames[i]).replace(/\\W+/g, \"\"),\n          index: z,\n          description: unitTypeInfo[0],\n          minGuests:  parseInt(unitTypeInfo[1]),\n          maxGuests: parseInt(unitTypeInfo[2]),\n          price: unitTypeInfo[3],\n          active: unitTypeInfo[3],\n          amenities: hotelUnitAmenities,\n          images: images\n        });\n      }\n    }\n\n    // Hotel Units\n    for (var i = 1; i < totalUnits; i++) {\n      let unitAddress = wtHotel.childs.call(i);\n      if (unitAddress != '0x0000000000000000000000000000000000000000'){\n        let hotelUnit = this.web3.eth.contract(this.contracts.HotelUnit.abi).at(unitAddress);\n        units.push({\n          address: unitAddress,\n          unitType: hotelUnit.unitType(),\n          active: hotelUnit.active()\n        });\n      }\n    }\n\n    this.hotels[hotelAddress] = {\n      name: wtHotel.name(),\n      description: wtHotel.description(),\n      lineOne: wtHotel.lineOne(),\n      lineTwo: wtHotel.lineTwo(),\n      zip: wtHotel.zip(),\n      country: wtHotel.country(),\n      timezone: parseInt(wtHotel.timezone()),\n      latitude: parseInt(wtHotel.latitude()),\n      longitude: parseInt(wtHotel.longitude()),\n      images: hotelImages,\n      unitTypes: unitTypes,\n      units: units\n    };\n    return this.hotels[hotelAddress];\n  }\n\n  // Create a hotel contract\n  this.createHotel = async function(password, name, description){\n    var self = this;\n    const data = self.wtIndex.registerHotel.getData(name, description, {from: self.wallet.address});\n    let tx = await self.wallet.sendTx(password, {\n      to: self.wtIndex.address,\n      data: data,\n      gasLimit: 4700000\n    });\n    await self.wallet.waitForTX(tx.transactionHash);\n    const wtHotelAddress = await self.wtIndex.getHotelsByOwner(self.wallet.address);\n    let wtHotel = self.web3.eth.contract(self.contracts.Hotel.abi).at(wtHotelAddress[ wtHotelAddress.length-1 ]);\n    return wtHotel;\n  }\n\n  this.changeHotelInfo = async function(password, hotelAddress, name, description){\n    var self = this;\n    const wtHotelAddresses = await self.wtIndex.getHotelsByOwner(self.wallet.address);\n    const hotelIndex = wtHotelAddresses.indexOf(hotelAddress);\n    let wtHotel = self.web3.eth.contract(self.contracts.Hotel.abi).at(hotelAddress);\n    let data = wtHotel.editInfo.getData(name, description);\n    data = self.wtIndex.callHotel.getData(hotelIndex, data, {from: self.wallet.address});\n    let tx = await self.wallet.sendTx(password, {\n      to: self.wtIndex.address,\n      data: data,\n      gasLimit: 4700000\n    });\n    await self.wallet.waitForTX(tx.transactionHash);\n  }\n\n  this.changeHotelAddress = async function(password, hotelAddress, lineOne, lineTwo, zipCode, country){\n    var self = this;\n    const wtHotelAddresses = await self.wtIndex.getHotelsByOwner(self.wallet.address);\n    const hotelIndex = wtHotelAddresses.indexOf(hotelAddress);\n    let wtHotel = self.web3.eth.contract(self.contracts.Hotel.abi).at(hotelAddress);\n    let data = wtHotel.editAddress.getData(lineOne, lineTwo, zipCode, country);\n    data = self.wtIndex.callHotel.getData(hotelIndex, data, {from: self.wallet.address});\n    let tx = await self.wallet.sendTx(password, {\n      to: self.wtIndex.address,\n      data: data,\n      gasLimit: 4700000\n    });\n    return await self.wallet.waitForTX(tx.transactionHash);\n  }\n\n  this.changeHotelLocation = async function(password, hotelAddress, timezone, latitude, longitude){\n    var self = this;\n    const wtHotelAddresses = await self.wtIndex.getHotelsByOwner(self.wallet.address);\n    const hotelIndex = wtHotelAddresses.indexOf(hotelAddress);\n    let wtHotel = self.web3.eth.contract(self.contracts.Hotel.abi).at(hotelAddress);\n    let data = wtHotel.editLocation.getData(timezone, latitude, longitude);\n    data = self.wtIndex.callHotel.getData(hotelIndex, data);\n    let tx = await self.wallet.sendTx(password, {\n      to: self.wtIndex.address,\n      data: data,\n      gasLimit: 4700000\n    });\n    return await self.wallet.waitForTX(tx.transactionHash);\n  }\n\n  this.addUnitType = async function(password, hotelAddress, unitType){\n    var self = this;\n    const wtHotelAddresses = await self.wtIndex.getHotelsByOwner(self.wallet.address);\n    const hotelIndex = wtHotelAddresses.indexOf(hotelAddress);\n    let wtHotel = self.web3.eth.contract(self.contracts.Hotel.abi).at(hotelAddress);\n\n    let data = self.web3.eth.contract(self.contracts.HotelUnitType.abi).new.getData(hotelAddress, self.web3.toHex(unitType), {data: self.contracts.HotelUnitType.unlinked_binary});\n    let tx = await self.wallet.sendTx(password, {\n      data: data,\n      gasLimit: 4700000\n    });\n    const createTx = await self.wallet.waitForTX(tx.transactionHash);\n    let wtHotelUnitType = self.web3.eth.contract(self.contracts.HotelUnitType.abi).at(createTx.contractAddress);\n\n    data = wtHotel.addUnitType.getData(wtHotelUnitType.address, self.web3.toHex(unitType));\n    data = self.wtIndex.callHotel.getData(hotelIndex, data);\n    tx = await self.wallet.sendTx(password, {\n      to: self.wtIndex.address,\n      data: data,\n      gasLimit: 4700000\n    });\n\n    return await self.wallet.waitForTX(tx.transactionHash);\n  }\n\n  this.removeUnitType = async function(password, hotelAddress, unitType){\n    var self = this;\n    const wtHotelAddresses = await self.wtIndex.getHotelsByOwner(self.wallet.address);\n    const hotelIndex = wtHotelAddresses.indexOf(hotelAddress);\n    let wtHotel = self.web3.eth.contract(self.contracts.Hotel.abi).at(hotelAddress);\n    const unitTypeHex = util.bufferToHex(util.setLengthRight(self.web3.toHex(unitType), 32));\n    const unitTypeIndex = wtHotel.getUnitTypeNames().indexOf(unitTypeHex);\n    let data = wtHotel.removeUnitType.getData(self.web3.toHex(unitType), unitTypeIndex);\n    data = self.wtIndex.callHotel.getData(hotelIndex, data);\n    const tx = await self.wallet.sendTx(password, {\n      to: self.wtIndex.address,\n      data: data,\n      gasLimit: 4700000\n    });\n    return await self.wallet.waitForTX(tx.transactionHash);\n  }\n\n    this.editUnitType = async function(password, hotelAddress, unitType, description, minGuests, maxGuests, price){\n    var self = this;\n    const wtHotelAddresses = await self.wtIndex.getHotelsByOwner(self.wallet.address);\n    const hotelIndex = wtHotelAddresses.indexOf(hotelAddress);\n    let wtHotel = self.web3.eth.contract(self.contracts.Hotel.abi).at(hotelAddress);\n    let wtHotelUnitType = self.web3.eth.contract(self.contracts.HotelUnitType.abi).at(await wtHotel.getUnitType(self.web3.toHex(unitType)));\n    let data = wtHotelUnitType.edit.getData(description, minGuests, maxGuests, price);\n    data = wtHotel.callUnitType.getData(self.web3.toHex(unitType), data);\n    data = self.wtIndex.callHotel.getData(hotelIndex, data);\n    let tx = await self.wallet.sendTx(password, {\n      to: self.wtIndex.address,\n      data: data,\n      gasLimit: 4700000\n    });\n    return await self.wallet.waitForTX(tx.transactionHash);\n  }\n\n\n  this.addUnit = async function(password, hotelAddress, unitType){\n    var self = this;\n    const wtHotelAddresses = await self.wtIndex.getHotelsByOwner(self.wallet.address);\n    const hotelIndex = wtHotelAddresses.indexOf(hotelAddress);\n\n    let data = self.web3.eth.contract(self.contracts.HotelUnit.abi).new.getData(hotelAddress, self.web3.toHex(unitType), {data: self.contracts.HotelUnit.unlinked_binary});\n    let tx = await self.wallet.sendTx(password, {\n      data: data,\n      gasLimit: 4700000\n    });\n    const createTx = await self.wallet.waitForTX(tx.transactionHash);\n\n    let wtHotel = self.web3.eth.contract(self.contracts.Hotel.abi).at(hotelAddress);\n    data = wtHotel.addUnit.getData(self.web3.toHex(unitType), createTx.contractAddress);\n    data = self.wtIndex.callHotel.getData(hotelIndex, data);\n    tx = await self.wallet.sendTx(password, {\n      to: self.wtIndex.address,\n      data: data,\n      gasLimit: 4700000\n    });\n    return await self.wallet.waitForTX(tx.transactionHash);\n  }\n\n  this.removeUnit = async function(password, hotelAddress, unitAddress){\n    var self = this;\n    const wtHotelAddresses = await self.wtIndex.getHotelsByOwner(self.wallet.address);\n    const hotelIndex = wtHotelAddresses.indexOf(hotelAddress);\n    let wtHotel = self.web3.eth.contract(self.contracts.Hotel.abi).at(hotelAddress);\n    let data = wtHotel.removeUnit.getData(unitAddress);\n    data = self.wtIndex.callHotel.getData(hotelIndex, data);\n    let tx = await self.wallet.sendTx(password, {\n      to: self.wtIndex.address,\n      data: data,\n      gasLimit: 4700000\n    });\n    return await self.wallet.waitForTX(tx.transactionHash);\n  }\n\n  this.setUnitActive = async function(password, hotelAddress, unitAddress, active){\n    var self = this;\n    const wtHotelAddresses = await self.wtIndex.getHotelsByOwner(self.wallet.address);\n    const hotelIndex = wtHotelAddresses.indexOf(hotelAddress);\n    let wtHotel = self.web3.eth.contract(self.contracts.Hotel.abi).at(hotelAddress);\n    let wtHotelUnit = self.web3.eth.contract(self.contracts.HotelUnit.abi).at(unitAddress);\n    let data = wtHotelUnit.setActive.getData(active);\n    data = wtHotel.callUnit.getData(unitAddress, data);\n    data = self.wtIndex.callHotel.getData(hotelIndex, data);\n    let tx = await self.wallet.sendTx(password, {\n      to: self.wtIndex.address,\n      data: data,\n      gasLimit: 4700000\n    });\n    return await self.wallet.waitForTX(tx.transactionHash);\n  }\n\n  this.setUnitPrice = async function(password, hotelAddress, unitAddress, price, fromDay, amountDays){\n    var self = this;\n    const wtHotelAddresses = await self.wtIndex.getHotelsByOwner(self.wallet.address);\n    const hotelIndex = wtHotelAddresses.indexOf(hotelAddress);\n    let wtHotel = self.web3.eth.contract(self.contracts.Hotel.abi).at(hotelAddress);\n    let wtHotelUnit = self.web3.eth.contract(self.contracts.HotelUnit.abi).at(unitAddress);\n    let data = wtHotelUnit.setPrice.getData(price, fromDay, amountDays);\n    data = wtHotel.callUnit.getData(unitAddress, data);\n    data = self.wtIndex.callHotel.getData(hotelIndex, data);\n    let tx = await self.wallet.sendTx(password, {\n      to: self.wtIndex.address,\n      data: data,\n      gasLimit: 4700000\n    });\n    return await self.wallet.waitForTX(tx.transactionHash);\n  }\n\n  this.addAmenity = async function(password, hotelAddress, unitType, amenity){\n    var self = this;\n    const wtHotelAddresses = await self.wtIndex.getHotelsByOwner(self.wallet.address);\n    const hotelIndex = wtHotelAddresses.indexOf(hotelAddress);\n    let wtHotel = self.web3.eth.contract(self.contracts.Hotel.abi).at(hotelAddress);\n    let wtHotelUnitType = self.web3.eth.contract(self.contracts.HotelUnitType.abi).at(await wtHotel.getUnitType(self.web3.toHex(unitType)));\n    let data = wtHotelUnitType.addAmenity.getData(amenity);\n    data = wtHotel.callUnitType.getData(self.web3.toHex(unitType), data);\n    data = self.wtIndex.callHotel.getData(hotelIndex, data);\n    let tx = await self.wallet.sendTx(password, {\n      to: self.wtIndex.address,\n      data: data,\n      gasLimit: 4700000\n    });\n    return await self.wallet.waitForTX(tx.transactionHash);\n  }\n\n  this.removeAmenity = async function(password, hotelAddress, unitType, amenity){\n    var self = this;\n    const wtHotelAddresses = await self.wtIndex.getHotelsByOwner(self.wallet.address);\n    const hotelIndex = wtHotelAddresses.indexOf(hotelAddress);\n    let wtHotel = self.web3.eth.contract(self.contracts.Hotel.abi).at(hotelAddress);\n    let wtHotelUnitType = self.web3.eth.contract(self.contracts.HotelUnitType.abi).at(await wtHotel.getUnitType(self.web3.toHex(unitType)));\n    let data = wtHotelUnitType.removeAmenity.getData(amenity);\n    data = wtHotel.callUnitType.getData(self.web3.toHex(unitType), data);\n    data = self.wtIndex.callHotel.getData(hotelIndex, data);\n    let tx = await self.wallet.sendTx(password, {\n      to: self.wtIndex.address,\n      data: data,\n      gasLimit: 4700000\n    });\n    return await self.wallet.waitForTX(tx.transactionHash);\n  }\n\n  this.getBookings = function(){\n    var self = this;\n    var txs = [];\n    let wtHotelAddresses = this.wtIndex.getHotelsByOwner(this.wallet.address);\n    for (var i = 0; i < wtHotelAddresses.length; i++){\n      let wtHotel = this.web3.eth.contract(this.contracts.Hotel.abi).at(wtHotelAddresses[i]);\n      let unitTypeNames = wtHotel.getUnitTypeNames();\n      for (var u = 1; u < unitTypeNames.length; u++)\n        txs = _.merge(txs, self.wallet.getTxs({\n          address: wtHotel.getUnitType(unitTypeNames[u]),\n          from: false\n        }));\n    }\n    for (i = 0; i < txs.length; i++)\n      txs[i].decoded = self.abiDecoder.decodeMethod(txs[i].input);\n    txs = _.filter(txs, function(t){ return t.decoded});\n    for (i = 0; i < txs.length; i++){\n      let unitType = self.web3.eth.contract(self.contracts.HotelUnitType.abi).at(txs[i].to);\n      txs[i].publicCall = self.abiDecoder.decodeMethod(txs[i].decoded.params[0].value);\n      txs[i].privateData = self.web3.toAscii(txs[i].decoded.params[1].value);\n      txs[i].unitType = self.web3.toAscii( unitType.unitType() ).replace(/\\W+/g, \"\");\n      txs[i].hotelAddress = unitType.owner();\n      txs[i].hotelName = self.web3.eth.contract(self.contracts.Hotel.abi).at(txs[i].hotelAddress).name();\n      txs[i].accepted = false;\n    }\n    return txs;\n  }\n\n  this.getHotels = function() {\n    return this.hotels;\n  }\n\n  this.getHotelsAddrs = function() {\n    return this.hotelsAddrs;\n  }\n\n  this.getHotel = function(hotelAddress) {\n    return this.hotels[hotelAddress];\n  }\n\n  this.getReservation = function(unitAddress, day) {\n    return this.web3.eth.contract(this.contracts.HotelUnit.abi).at(unitAddress).getReservation(day);\n  }\n\n};\n\nexport default Hotel;",
      "start": 0,
      "end": 16587,
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 394,
          "column": 23
        }
      }
    }
  ],
  "tokens": [
    {
      "type": "CommentBlock",
      "value": "\nvar WTKey = require('./WTKey');\nvar WTWallet = require('./WTWallet');\nvar WTUtils = require('./WTUtils');\nvar WTKeyIndexContract = require('../build/contracts/WTKeyIndex.json');\nvar WTIndexContract = require('../build/contracts/WTIndex.json');\nvar HotelContract = require('../build/contracts/Hotel.json');\nvar UnitTypeContract = require('../build/contracts/UnitType.json');\nvar UnitContract = require('../build/contracts/Unit.json');\nvar PrivateCallContract = require('../build/contracts/PrivateCall.json');\nvar LifTokenContract = require('../build/contracts/LifToken.json');\n\nconst util = require('ethereumjs-util');\n\nvar Hotel = function(options){\n\n  // Winding Tree key for encryption\n  this.WTKey = new WTKey(options.keys || {});\n\n  // Ethereum Wallet\n  this.wallet = new WTWallet(options.wallet || {});\n\n  this.utils = WTUtils;\n\n  this.web3 = this.wallet.web3;\n\n  this.hotels = options.hotels || {};\n  this.indexAddress = options.indexAddress || '';\n  this.wtIndex = options.indexAddress ? new WTIndexContract().at(options.indexAddress) : null;\n  this.contracts = {\n    WTIndex: WTIndexContract,\n    WTKeyIndex: WTKeyIndexContract,\n    Hotel: HotelContract,\n    LifToken: LifTokenContract,\n    HotelUnit: UnitContract,\n    HotelUnitType: UnitTypeContract\n  };\n\n  this.setIndex = function(indexAddress){\n    this.indexAddress = indexAddress;\n    this.wtIndex = this.web3.eth.contract(this.contracts.WTIndex.abi).at(indexAddress);\n  }\n\n  // Update hotels information\n  this.updateHotels = function(){\n    this.hotelsAddrs = this.wtIndex.getHotelsByOwner(this.wallet.address);\n    this.hotels = {};\n    for (var i = 0; i < this.hotelsAddrs.length; i++)\n      this.updateHotel(this.hotelsAddrs[i]);\n    return this.hotels;\n  }\n\n  // Update hotel information\n  this.updateHotel = function(hotelAddress){\n    let wtHotel = this.web3.eth.contract(this.contracts.Hotel.abi).at(hotelAddress);\n    let unitTypeNames = wtHotel.getUnitTypeNames();\n    let unitTypes = [];\n    let totalUnits = wtHotel.getChildsLength();\n    let units = [];\n\n    // Hotel images\n    let hotelImages = [];\n    for (var z = 0; z < wtHotel.getImagesLength(); z++)\n      hotelImages.push(wtHotel.getImage(z));\n\n    // Unit Types\n    for (var i = 1; i < unitTypeNames.length; i++) {\n      if (wtHotel.getUnitType(unitTypeNames[i]) != '0x0000000000000000000000000000000000000000'){\n        let hotelUnitType = this.web3.eth.contract(this.contracts.HotelUnitType.abi).at(wtHotel.getUnitType(unitTypeNames[i]));\n        let unitTypeInfo = hotelUnitType.getInfo();\n        let hotelUnitAmenities = [];\n        hotelUnitType.getAmenities(z).map(function(a ,i){\n          if (parseInt(a) > 0) hotelUnitAmenities.push(parseInt(a));\n        });\n        let images = [];\n        for (var z = 0; z < hotelUnitType.getImagesLength(); z++)\n          images.push(hotelUnitType.getImage(z));\n        unitTypes.push({\n          type: this.web3.toAscii(unitTypeNames[i]).replace(/\\W+/g, \"\"),\n          index: z,\n          description: unitTypeInfo[0],\n          minGuests:  parseInt(unitTypeInfo[1]),\n          maxGuests: parseInt(unitTypeInfo[2]),\n          price: unitTypeInfo[3],\n          active: unitTypeInfo[3],\n          amenities: hotelUnitAmenities,\n          images: images\n        });\n      }\n    }\n\n    // Hotel Units\n    for (var i = 1; i < totalUnits; i++) {\n      let unitAddress = wtHotel.childs.call(i);\n      if (unitAddress != '0x0000000000000000000000000000000000000000'){\n        let hotelUnit = this.web3.eth.contract(this.contracts.HotelUnit.abi).at(unitAddress);\n        units.push({\n          address: unitAddress,\n          unitType: hotelUnit.unitType(),\n          active: hotelUnit.active()\n        });\n      }\n    }\n\n    this.hotels[hotelAddress] = {\n      name: wtHotel.name(),\n      description: wtHotel.description(),\n      lineOne: wtHotel.lineOne(),\n      lineTwo: wtHotel.lineTwo(),\n      zip: wtHotel.zip(),\n      country: wtHotel.country(),\n      timezone: parseInt(wtHotel.timezone()),\n      latitude: parseInt(wtHotel.latitude()),\n      longitude: parseInt(wtHotel.longitude()),\n      images: hotelImages,\n      unitTypes: unitTypes,\n      units: units\n    };\n    return this.hotels[hotelAddress];\n  }\n\n  // Create a hotel contract\n  this.createHotel = async function(password, name, description){\n    var self = this;\n    const data = self.wtIndex.registerHotel.getData(name, description, {from: self.wallet.address});\n    let tx = await self.wallet.sendTx(password, {\n      to: self.wtIndex.address,\n      data: data,\n      gasLimit: 4700000\n    });\n    await self.wallet.waitForTX(tx.transactionHash);\n    const wtHotelAddress = await self.wtIndex.getHotelsByOwner(self.wallet.address);\n    let wtHotel = self.web3.eth.contract(self.contracts.Hotel.abi).at(wtHotelAddress[ wtHotelAddress.length-1 ]);\n    return wtHotel;\n  }\n\n  this.changeHotelInfo = async function(password, hotelAddress, name, description){\n    var self = this;\n    const wtHotelAddresses = await self.wtIndex.getHotelsByOwner(self.wallet.address);\n    const hotelIndex = wtHotelAddresses.indexOf(hotelAddress);\n    let wtHotel = self.web3.eth.contract(self.contracts.Hotel.abi).at(hotelAddress);\n    let data = wtHotel.editInfo.getData(name, description);\n    data = self.wtIndex.callHotel.getData(hotelIndex, data, {from: self.wallet.address});\n    let tx = await self.wallet.sendTx(password, {\n      to: self.wtIndex.address,\n      data: data,\n      gasLimit: 4700000\n    });\n    await self.wallet.waitForTX(tx.transactionHash);\n  }\n\n  this.changeHotelAddress = async function(password, hotelAddress, lineOne, lineTwo, zipCode, country){\n    var self = this;\n    const wtHotelAddresses = await self.wtIndex.getHotelsByOwner(self.wallet.address);\n    const hotelIndex = wtHotelAddresses.indexOf(hotelAddress);\n    let wtHotel = self.web3.eth.contract(self.contracts.Hotel.abi).at(hotelAddress);\n    let data = wtHotel.editAddress.getData(lineOne, lineTwo, zipCode, country);\n    data = self.wtIndex.callHotel.getData(hotelIndex, data, {from: self.wallet.address});\n    let tx = await self.wallet.sendTx(password, {\n      to: self.wtIndex.address,\n      data: data,\n      gasLimit: 4700000\n    });\n    return await self.wallet.waitForTX(tx.transactionHash);\n  }\n\n  this.changeHotelLocation = async function(password, hotelAddress, timezone, latitude, longitude){\n    var self = this;\n    const wtHotelAddresses = await self.wtIndex.getHotelsByOwner(self.wallet.address);\n    const hotelIndex = wtHotelAddresses.indexOf(hotelAddress);\n    let wtHotel = self.web3.eth.contract(self.contracts.Hotel.abi).at(hotelAddress);\n    let data = wtHotel.editLocation.getData(timezone, latitude, longitude);\n    data = self.wtIndex.callHotel.getData(hotelIndex, data);\n    let tx = await self.wallet.sendTx(password, {\n      to: self.wtIndex.address,\n      data: data,\n      gasLimit: 4700000\n    });\n    return await self.wallet.waitForTX(tx.transactionHash);\n  }\n\n  this.addUnitType = async function(password, hotelAddress, unitType){\n    var self = this;\n    const wtHotelAddresses = await self.wtIndex.getHotelsByOwner(self.wallet.address);\n    const hotelIndex = wtHotelAddresses.indexOf(hotelAddress);\n    let wtHotel = self.web3.eth.contract(self.contracts.Hotel.abi).at(hotelAddress);\n\n    let data = self.web3.eth.contract(self.contracts.HotelUnitType.abi).new.getData(hotelAddress, self.web3.toHex(unitType), {data: self.contracts.HotelUnitType.unlinked_binary});\n    let tx = await self.wallet.sendTx(password, {\n      data: data,\n      gasLimit: 4700000\n    });\n    const createTx = await self.wallet.waitForTX(tx.transactionHash);\n    let wtHotelUnitType = self.web3.eth.contract(self.contracts.HotelUnitType.abi).at(createTx.contractAddress);\n\n    data = wtHotel.addUnitType.getData(wtHotelUnitType.address, self.web3.toHex(unitType));\n    data = self.wtIndex.callHotel.getData(hotelIndex, data);\n    tx = await self.wallet.sendTx(password, {\n      to: self.wtIndex.address,\n      data: data,\n      gasLimit: 4700000\n    });\n\n    return await self.wallet.waitForTX(tx.transactionHash);\n  }\n\n  this.removeUnitType = async function(password, hotelAddress, unitType){\n    var self = this;\n    const wtHotelAddresses = await self.wtIndex.getHotelsByOwner(self.wallet.address);\n    const hotelIndex = wtHotelAddresses.indexOf(hotelAddress);\n    let wtHotel = self.web3.eth.contract(self.contracts.Hotel.abi).at(hotelAddress);\n    const unitTypeHex = util.bufferToHex(util.setLengthRight(self.web3.toHex(unitType), 32));\n    const unitTypeIndex = wtHotel.getUnitTypeNames().indexOf(unitTypeHex);\n    let data = wtHotel.removeUnitType.getData(self.web3.toHex(unitType), unitTypeIndex);\n    data = self.wtIndex.callHotel.getData(hotelIndex, data);\n    const tx = await self.wallet.sendTx(password, {\n      to: self.wtIndex.address,\n      data: data,\n      gasLimit: 4700000\n    });\n    return await self.wallet.waitForTX(tx.transactionHash);\n  }\n\n    this.editUnitType = async function(password, hotelAddress, unitType, description, minGuests, maxGuests, price){\n    var self = this;\n    const wtHotelAddresses = await self.wtIndex.getHotelsByOwner(self.wallet.address);\n    const hotelIndex = wtHotelAddresses.indexOf(hotelAddress);\n    let wtHotel = self.web3.eth.contract(self.contracts.Hotel.abi).at(hotelAddress);\n    let wtHotelUnitType = self.web3.eth.contract(self.contracts.HotelUnitType.abi).at(await wtHotel.getUnitType(self.web3.toHex(unitType)));\n    let data = wtHotelUnitType.edit.getData(description, minGuests, maxGuests, price);\n    data = wtHotel.callUnitType.getData(self.web3.toHex(unitType), data);\n    data = self.wtIndex.callHotel.getData(hotelIndex, data);\n    let tx = await self.wallet.sendTx(password, {\n      to: self.wtIndex.address,\n      data: data,\n      gasLimit: 4700000\n    });\n    return await self.wallet.waitForTX(tx.transactionHash);\n  }\n\n\n  this.addUnit = async function(password, hotelAddress, unitType){\n    var self = this;\n    const wtHotelAddresses = await self.wtIndex.getHotelsByOwner(self.wallet.address);\n    const hotelIndex = wtHotelAddresses.indexOf(hotelAddress);\n\n    let data = self.web3.eth.contract(self.contracts.HotelUnit.abi).new.getData(hotelAddress, self.web3.toHex(unitType), {data: self.contracts.HotelUnit.unlinked_binary});\n    let tx = await self.wallet.sendTx(password, {\n      data: data,\n      gasLimit: 4700000\n    });\n    const createTx = await self.wallet.waitForTX(tx.transactionHash);\n\n    let wtHotel = self.web3.eth.contract(self.contracts.Hotel.abi).at(hotelAddress);\n    data = wtHotel.addUnit.getData(self.web3.toHex(unitType), createTx.contractAddress);\n    data = self.wtIndex.callHotel.getData(hotelIndex, data);\n    tx = await self.wallet.sendTx(password, {\n      to: self.wtIndex.address,\n      data: data,\n      gasLimit: 4700000\n    });\n    return await self.wallet.waitForTX(tx.transactionHash);\n  }\n\n  this.removeUnit = async function(password, hotelAddress, unitAddress){\n    var self = this;\n    const wtHotelAddresses = await self.wtIndex.getHotelsByOwner(self.wallet.address);\n    const hotelIndex = wtHotelAddresses.indexOf(hotelAddress);\n    let wtHotel = self.web3.eth.contract(self.contracts.Hotel.abi).at(hotelAddress);\n    let data = wtHotel.removeUnit.getData(unitAddress);\n    data = self.wtIndex.callHotel.getData(hotelIndex, data);\n    let tx = await self.wallet.sendTx(password, {\n      to: self.wtIndex.address,\n      data: data,\n      gasLimit: 4700000\n    });\n    return await self.wallet.waitForTX(tx.transactionHash);\n  }\n\n  this.setUnitActive = async function(password, hotelAddress, unitAddress, active){\n    var self = this;\n    const wtHotelAddresses = await self.wtIndex.getHotelsByOwner(self.wallet.address);\n    const hotelIndex = wtHotelAddresses.indexOf(hotelAddress);\n    let wtHotel = self.web3.eth.contract(self.contracts.Hotel.abi).at(hotelAddress);\n    let wtHotelUnit = self.web3.eth.contract(self.contracts.HotelUnit.abi).at(unitAddress);\n    let data = wtHotelUnit.setActive.getData(active);\n    data = wtHotel.callUnit.getData(unitAddress, data);\n    data = self.wtIndex.callHotel.getData(hotelIndex, data);\n    let tx = await self.wallet.sendTx(password, {\n      to: self.wtIndex.address,\n      data: data,\n      gasLimit: 4700000\n    });\n    return await self.wallet.waitForTX(tx.transactionHash);\n  }\n\n  this.setUnitPrice = async function(password, hotelAddress, unitAddress, price, fromDay, amountDays){\n    var self = this;\n    const wtHotelAddresses = await self.wtIndex.getHotelsByOwner(self.wallet.address);\n    const hotelIndex = wtHotelAddresses.indexOf(hotelAddress);\n    let wtHotel = self.web3.eth.contract(self.contracts.Hotel.abi).at(hotelAddress);\n    let wtHotelUnit = self.web3.eth.contract(self.contracts.HotelUnit.abi).at(unitAddress);\n    let data = wtHotelUnit.setPrice.getData(price, fromDay, amountDays);\n    data = wtHotel.callUnit.getData(unitAddress, data);\n    data = self.wtIndex.callHotel.getData(hotelIndex, data);\n    let tx = await self.wallet.sendTx(password, {\n      to: self.wtIndex.address,\n      data: data,\n      gasLimit: 4700000\n    });\n    return await self.wallet.waitForTX(tx.transactionHash);\n  }\n\n  this.addAmenity = async function(password, hotelAddress, unitType, amenity){\n    var self = this;\n    const wtHotelAddresses = await self.wtIndex.getHotelsByOwner(self.wallet.address);\n    const hotelIndex = wtHotelAddresses.indexOf(hotelAddress);\n    let wtHotel = self.web3.eth.contract(self.contracts.Hotel.abi).at(hotelAddress);\n    let wtHotelUnitType = self.web3.eth.contract(self.contracts.HotelUnitType.abi).at(await wtHotel.getUnitType(self.web3.toHex(unitType)));\n    let data = wtHotelUnitType.addAmenity.getData(amenity);\n    data = wtHotel.callUnitType.getData(self.web3.toHex(unitType), data);\n    data = self.wtIndex.callHotel.getData(hotelIndex, data);\n    let tx = await self.wallet.sendTx(password, {\n      to: self.wtIndex.address,\n      data: data,\n      gasLimit: 4700000\n    });\n    return await self.wallet.waitForTX(tx.transactionHash);\n  }\n\n  this.removeAmenity = async function(password, hotelAddress, unitType, amenity){\n    var self = this;\n    const wtHotelAddresses = await self.wtIndex.getHotelsByOwner(self.wallet.address);\n    const hotelIndex = wtHotelAddresses.indexOf(hotelAddress);\n    let wtHotel = self.web3.eth.contract(self.contracts.Hotel.abi).at(hotelAddress);\n    let wtHotelUnitType = self.web3.eth.contract(self.contracts.HotelUnitType.abi).at(await wtHotel.getUnitType(self.web3.toHex(unitType)));\n    let data = wtHotelUnitType.removeAmenity.getData(amenity);\n    data = wtHotel.callUnitType.getData(self.web3.toHex(unitType), data);\n    data = self.wtIndex.callHotel.getData(hotelIndex, data);\n    let tx = await self.wallet.sendTx(password, {\n      to: self.wtIndex.address,\n      data: data,\n      gasLimit: 4700000\n    });\n    return await self.wallet.waitForTX(tx.transactionHash);\n  }\n\n  this.getBookings = function(){\n    var self = this;\n    var txs = [];\n    let wtHotelAddresses = this.wtIndex.getHotelsByOwner(this.wallet.address);\n    for (var i = 0; i < wtHotelAddresses.length; i++){\n      let wtHotel = this.web3.eth.contract(this.contracts.Hotel.abi).at(wtHotelAddresses[i]);\n      let unitTypeNames = wtHotel.getUnitTypeNames();\n      for (var u = 1; u < unitTypeNames.length; u++)\n        txs = _.merge(txs, self.wallet.getTxs({\n          address: wtHotel.getUnitType(unitTypeNames[u]),\n          from: false\n        }));\n    }\n    for (i = 0; i < txs.length; i++)\n      txs[i].decoded = self.abiDecoder.decodeMethod(txs[i].input);\n    txs = _.filter(txs, function(t){ return t.decoded});\n    for (i = 0; i < txs.length; i++){\n      let unitType = self.web3.eth.contract(self.contracts.HotelUnitType.abi).at(txs[i].to);\n      txs[i].publicCall = self.abiDecoder.decodeMethod(txs[i].decoded.params[0].value);\n      txs[i].privateData = self.web3.toAscii(txs[i].decoded.params[1].value);\n      txs[i].unitType = self.web3.toAscii( unitType.unitType() ).replace(/\\W+/g, \"\");\n      txs[i].hotelAddress = unitType.owner();\n      txs[i].hotelName = self.web3.eth.contract(self.contracts.Hotel.abi).at(txs[i].hotelAddress).name();\n      txs[i].accepted = false;\n    }\n    return txs;\n  }\n\n  this.getHotels = function() {\n    return this.hotels;\n  }\n\n  this.getHotelsAddrs = function() {\n    return this.hotelsAddrs;\n  }\n\n  this.getHotel = function(hotelAddress) {\n    return this.hotels[hotelAddress];\n  }\n\n  this.getReservation = function(unitAddress, day) {\n    return this.web3.eth.contract(this.contracts.HotelUnit.abi).at(unitAddress).getReservation(day);\n  }\n\n};\n\nexport default Hotel;",
      "start": 0,
      "end": 16587,
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 394,
          "column": 23
        }
      }
    },
    {
      "type": {
        "label": "eof",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 16587,
      "end": 16587,
      "loc": {
        "start": {
          "line": 394,
          "column": 23
        },
        "end": {
          "line": 394,
          "column": 23
        }
      }
    }
  ]
}